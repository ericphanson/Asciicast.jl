var documenterSearchIndex = {"docs":
[{"location":"documenter_usage/#Documenter-usage","page":"Documenter usage","title":"Documenter usage","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"To use Asciicast with documenter, the asciinema-player javascript and CSS assets must be provided to Documenter in makedocs in your docs/make.jl file.","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"This can be done using the Asciicast.assets function, e.g.","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"makedocs(;\n    # ...\n    assets = Asciicast.assets()\n)","category":"page"},{"location":"documenter_usage/#@cast-blocks","page":"Documenter usage","title":"@cast blocks","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Asciicast.jl works as a Documenter plugin, providing @cast blocks which work similarly to @repl blocks. For example:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast\nusing Pkg\nPkg.status()\n1 + 1\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"The above @cast block will effectively generate both a standard Documenter @repl block:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@repl\nusing Pkg\nPkg.status()\n1 + 1\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"and some raw HTML output:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"<div id=\"d59ee38d-184a-4888-8749-41b4df76ae3b\"></div>\n<script>\nAsciinemaPlayer.create(\n'data:text/plain;base64,eyJ2ZXJzaW9uIjoyLCJ3aWR0aCI6ODAsImhlaWdodCI6MTIsInRpbWVzdGFtcCI6MTcwMjE1ODMyMywiaWRsZV90aW1lX2xpbWl0IjoxLjAsImVudiI6eyJURVJNIjoieHRlcm0tMjU2Y29sb3IiLCJTSEVMTCI6Ii9iaW4venNoIn19ClswLjAwMTA5ODE1NTk3NTM0MTc5NjksImkiLCJ1c2luZyBQa2ciXQ0KWzAuNTAxMzQ1MTU3NjIzMjkxLCJvIiwianVsaWE+IHVzaW5nIFBrZ1xyXG4iXQ0KWzEuMDAyODIxMjA3MDQ2NTA4OCwibyIsIiJdDQpbMS41MDI5NzAyMTg2NTg0NDczLCJvIiwiXHJcbiJdDQpbMi4wMDI5NzQ5ODcwMzAwMjkzLCJpIiwiUGtnLnN0YXR1cygpIl0NClsyLjUwMjk3NjE3OTEyMjkyNSwibyIsImp1bGlhPiBQa2cuc3RhdHVzKClcclxuIl0NClszLjAxNTQ2MDAxNDM0MzI2MTcsIm8iLCJcdTAwMWJbMzJtXHUwMDFiWzFtU3RhdHVzXHUwMDFiWzIybVx1MDAxYlszOW0gIl0NClszLjUxNTUwNDEyMTc4MDM5NTUsIm8iLCJgfi9Bc2NpaWNhc3QuamwvZG9jcy9Qcm9qZWN0LnRvbWxgXHJcbiJdDQpbNC4wMTcxMTMyMDg3NzA3NTIsIm8iLCIgICJdDQpbNC41MTcxOTQwMzI2NjkwNjcsIm8iLCJcdTAwMWJbOTBtWzI2MDBkNDQ1XSBcdTAwMWJbMzltQXNjaWljYXN0IHYwLjEuMCBgLi5gIl0NCls1LjAxNzIzODE0MDEwNjIwMSwibyIsIlxyXG4gIl0NCls1LjUxNzI3NzAwMjMzNDU5NSwibyIsIiBcdTAwMWJbOTBtW2UzMDE3MmY1XSBcdTAwMWJbMzltIl0NCls2LjAxNzMxNTE0OTMwNzI1MSwibyIsIkRvY3VtZW50ZXIgdjEuMi4xXHJcbiJdDQpbNi41MTc3NzAwNTE5NTYxNzcsIm8iLCIiXQ0KWzcuMDE3OTI0MDcwMzU4Mjc2LCJvIiwiXHJcbiJdDQpbNy41MTc5MzIxNzY1ODk5NjYsImkiLCIxICsgMSJdDQpbOC4wMTc5MzMxMzAyNjQyODIsIm8iLCJqdWxpYT4gMSArIDFcclxuIl0NCls4LjUxODA5MzEwOTEzMDg2LCJvIiwiIl0NCls5LjAxODU5NDAyNjU2NTU1MiwibyIsIjJcclxuIl0NCg==',\ndocument.getElementById('d59ee38d-184a-4888-8749-41b4df76ae3b'), { autoPlay: true, fit: false}\n);\n</script>","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Here, the id is randomly generated with uuid4(), and the contents of the cast itself are base64-encoded and inlined into the HTML. Note: I initially tried saving these as separate files, but had trouble with casts not showing up on deployed pages, while inlining works reliably every time.","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"The output of this looks like:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/#Hiding-REPL-inputs","page":"Documenter usage","title":"Hiding REPL inputs","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"You can also use hide_inputs=true to hide the inputs, showing just the asciinema player. The syntax for that is:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast; hide_inputs=true\nusing Pkg\nPkg.status()\n1 + 1\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"This looks like:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/#Exceptions","page":"Documenter usage","title":"Exceptions","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Like in @repl blocks, exceptions are allowed. For example:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast\nerror(\"This is an exception!\")\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"This looks like:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"To prevent exceptions, use allow_errors=false, as in","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast; allow_errors=false\nerror(\"This is an exception!\")\n```","category":"page"},{"location":"documenter_usage/#Example-with-a-named-block","page":"Documenter usage","title":"Example with a named block","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"First block:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast 1; hide_inputs=true\nx = -1\nx*x\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"The next block continues:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast 1; hide_inputs=true\ny = x+1\nsqrt(x)\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Then we move to a REPL block:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@repl 1\n@show y\nz = y^2\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"@show y\nz = y^2","category":"page"},{"location":"documenter_usage/#Modifying-the-delay","page":"Documenter usage","title":"Modifying the delay","text":"","category":"section"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Delay of 0:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast; delay=0, hide_inputs=true\n1\n2\n3\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"Delay of 1:","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"```@cast; delay=1, hide_inputs=true\n1\n2\n3\n```","category":"page"},{"location":"documenter_usage/","page":"Documenter usage","title":"Documenter usage","text":"","category":"page"},{"location":"#Asciicast.jl","page":"Home","title":"Asciicast.jl","text":"","category":"section"},{"location":"#Simple-example","page":"Home","title":"Simple example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The string macro @cast_str provides a convenient API to construct a Cast object:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Asciicast\ncast\"\"\"\n    using Pkg\n    Pkg.status()\n    1 + 1\n    \"\"\"0.5","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Cast objects have a show method defined for HTML, allowing rich display with a local asciinema player, in Documenter, Pluto, jupyter, etc. For convenient use with Documenter in particular, see the @cast syntax in Documenter usage.","category":"page"},{"location":"#record_output-example","page":"Home","title":"record_output example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here only the outputs can be captured, as record_output is a function, not a macro.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Asciicast\nrecord_output(; height=10) do\n    @info \"Hello!\"\n    println(\"That was a logging statement, but this is printing.\")\n    x = 1\n    x + 1 # does not print anything-- no output!\n    @info \"here's `x`\" x\n    println(\"Now I'll wait a second\")\n    sleep(1)\n    println(\"ok, done!\")\nend","category":"page"},{"location":"#Cast-objects-and-a-manual-example","page":"Home","title":"Cast objects and a manual example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Asciicast provides a type Cast which can be used for constructing asciicast v2 files. The most low-level interface is to use manual write_event! calls as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Asciicast\nusing Asciicast: Header\ncast = Cast(IOBuffer(), Header(; height=5))\nwrite_event!(cast, OutputEvent, \"hello\\n\")\nwrite_event!(cast, OutputEvent, \"Let us wait...\")\nsleep(.5)\nwrite_event!(cast, OutputEvent, \"\\nDone!\")\ncast","category":"page"},{"location":"","page":"Home","title":"Home","text":"Such a Cast can be saved to a .cast file using Asciicast.save. These files are JSON lines files, which can be read with JSON3.read with the jsonlines=true keyword argument. They can also be parsed with Asciicast.parse_cast. They can be played in the terminal or uploaded to <asciinema.org> with asciinema, and converted to gifs with agg. Note that Asciicast.jl does not upload or embed any casts, using a local player instead.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Asciicast]","category":"page"},{"location":"#Asciicast.Cast","page":"Home","title":"Asciicast.Cast","text":"Cast(file_or_io=IOBuffer(), header=Header(), start_time=time(); delay=0.0)\n\nCreate a Cast object which represents an asciicast file (see https://github.com/asciinema/asciinema/blob/asciicast-v2/doc/asciicast-v2.md for the format).\n\nSet delay to enforce a constant delay between events.\n\nUse write_event! to write an event to the cast.\n\n\n\n\n\n","category":"type"},{"location":"#Asciicast.Event","page":"Home","title":"Asciicast.Event","text":"struct Event\n    time::Float64\n    type::EventType\n    event_data::String\nend\n\nRepresents an event in a cast file. See also EventType.\n\n\n\n\n\n","category":"type"},{"location":"#Asciicast.EventType","page":"Home","title":"Asciicast.EventType","text":"Asciicast.EventType\n\nAn enum consisting of Asciicast.OutputEvent and Asciicast.InputEvent.\n\n\n\n\n\n","category":"type"},{"location":"#Asciicast.Header","page":"Home","title":"Asciicast.Header","text":"Base.@kwdef struct Header\n    version::Int=2\n    width::Int=80\n    height::Int=24\n    timestamp::Union{Int, Nothing}=floor(Int, datetime2unix(now()))\n    duration::Union{Float64, Nothing}=nothing\n    idle_time_limit::Union{Float64, Nothing}=nothing\n    command::Union{String, Nothing}=nothing\n    title::Union{String, Nothing}=nothing\n    env::Union{Object,Nothing}=Object(\"SHELL\" => get(ENV, \"SHELL\", \"/bin/bash\"),\n                                            \"TERM\" => get(ENV, \"TERM\", \"xterm-256color\"))\n    theme::Union{Object,Nothing}=nothing\nend\n\nThe header of an asciicast file. Documented at https://github.com/asciinema/asciinema/blob/v2.4.0/doc/asciicast-v2.md#header.\n\n\n\n\n\n","category":"type"},{"location":"#Asciicast.assets","page":"Home","title":"Asciicast.assets","text":"Asciicast.assets(asciinema_version = \"3.6.3\")\n\nProvides a collection of Documenter assets which can be used in makedocs, e.g. makedocs(; assets=Asciicast.assets()).\n\n\n\n\n\n","category":"function"},{"location":"#Asciicast.parse_cast-Tuple{IO}","page":"Home","title":"Asciicast.parse_cast","text":"Asciicast.parse_cast(io::IO) -> header, events\n\nReturns a tuple consisting of a Header and vector of Event's.\n\n\n\n\n\n","category":"method"},{"location":"#Asciicast.record_output-Tuple{Any, AbstractString, Vararg{Any}}","page":"Home","title":"Asciicast.record_output","text":"record_output(f, filepath::AbstractString, start_time::Float64=time(); delay=0, kw...) -> filepath\nrecord_output(f, io::IO=IOBuffer(), start_time::Float64=time(); delay=0, kw...)\n\nExecutes f() while saving all output to a cast whose data is saved to io, or to a file at filepath. The arguments kw... may be any keyword arguments accepted by Header.\n\nThe parameters of the cast may be passed here; see Cast for more details.\n\nReturns a Cast object.\n\n\n\n\n\n","category":"method"},{"location":"#Asciicast.save-Tuple{Any, Cast}","page":"Home","title":"Asciicast.save","text":"save(output, cast::Cast)\n\nWrites the contents of a Cast cast to output.\n\n\n\n\n\n","category":"method"},{"location":"#Asciicast.write_event!-Tuple{Cast, Asciicast.EventType, AbstractString}","page":"Home","title":"Asciicast.write_event!","text":"write_event!(cast::Cast, event_type::EventType, event_data::AbstractString) -> time_since_start\n\nWrite an event to cast of type event_type (either OutputEvent or InputEvent) with data given by event_data.\n\n\n\n\n\n","category":"method"},{"location":"#Asciicast.@cast_str","page":"Home","title":"Asciicast.@cast_str","text":"@cast_str(code_string, delay=0) -> Cast\n\nCreates a Cast object by executing the code in code_string in a REPL-like environment.\n\nExample\n\nusing Asciicast\n\nc = cast\"x=1\"0.25 # note we set a delay of 0.25 here\n\nAsciicast.save(\"test.cast\", c)\n\n\n\n\n\n","category":"macro"}]
}
